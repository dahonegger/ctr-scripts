function [h] = pcolorRadar(Cube,axdiv,frames,lims,cmap,pauseLength)

% [h] = pcolorRadar(Cube,axdiv,frames,lims,framerate);
%
%       INPUT:
% Cube                      = Radar Cube structure name, as generated by
%                             ReadBin.m
% axdiv (optional)          = Division factor of axis units (useful for UTM)
%                             Value of 1000 gives units of km, etc.
%                             Default = 1
% frames (optional)         = Vector of frames to be displayed. If
%                             length(frames)>1, frames will be animated.
%                             Default = all frames
% lims (optional)           = [1x4] vector of axis limits
%                             Default = fit to data
% cmap (optional)           = Colormap
%                             Default = jet
% pauseLength (optional)    = For animation, pause length between frames.
%                             Default = as fast as it can!
%       OUTPUT:
% h                         = Figure handle
%
%
%       EXAMPLE USES:
% h = pcolorRadar(Cube); Animates through all frames with default settings
% h = pcolorRadar(Cube,1000,50); Displays 50th frame with km axes
% h = pcolorRadar(Cube,1,50,[],flipud(jet)); Displays 50th frame with
%                                            default colormap reversed


if ~exist('axdiv','var') || isempty(axdiv);axdiv = 1;end
if ~exist('frames','var') || isempty(frames);frames = 1:Cube.header.rotations;end
if ~exist('cmap','var') || isempty(cmap);cmap = jet;end
if ~exist('pauseLength','var') || isempty(pauseLength);pauseLength = 0.0001;end
   
if isfield(Cube,'Azi')
    Heading = Cube.results.heading;
    r = Cube.Rg;
%   Subtract heading and convert Azimuth (degrees) to theta (radians). The 90
%   degree shift is because pol2cart wants to define North along +x-axis
    tht = (90-Heading-Cube.Azi) * pi/180;
    [R,T]=meshgrid(r,tht(:,1));
    [X,Y]=pol2cart(T',R');
    Xdata = X+Cube.results.XOrigin;
    Ydata = Y+Cube.results.YOrigin;
else
    Xdata = Cube.xdom;
    Ydata = Cube.ydom;
end

if ~exist('lims','var') || isempty(lims);lims = [min(min(Xdata)) max(max(Xdata)) min(min(Ydata)) max(max(Ydata))];end


for i = frames
    signal = double(squeeze(Cube.data(:,:,i)));
    h = pcolor(Xdata/axdiv,Ydata/axdiv,signal);
    colormap(cmap)
    shading interp;axis equal;
    axis(lims/axdiv)
%     signal = double(squeeze(Cube.data(:,:,i)));
%     h = pcolor(Xdata/1000,Ydata/1000,signal);
%     shading interp;axis equal;
%     xlim(domain(1:2)/1000)
%     ylim(domain(3:4)/1000)
%     xticks = ceil(domain(1)/1000):ceil(domain(2)/1000);
%     yticks = ceil(domain(3)/1000):ceil(domain(4)/1000);
%     set(gca,'xtick',xticks)
%     set(gca,'ytick',yticks)
%     set(gca,'xminortick','on','yminortick','on')
    
    
    if length(frames) > 1
        axis equal
        axis(lims/axdiv)
        title({'Return Intensity',sprintf('%s EST',...
            datestr(epoch2Matlab(Cube.time(1,i))-datenum([0 0 0 5 0 0])))})
        drawnow
        pause(pauseLength)
    end
end
